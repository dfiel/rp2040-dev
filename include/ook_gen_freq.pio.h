// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------------ //
// ook_gen_freq //
// ------------ //

#define ook_gen_freq_wrap_target 0
#define ook_gen_freq_wrap 8

#define ook_gen_freq_offset_start 0u

static const uint16_t ook_gen_freq_program_instructions[] = {
            //     .wrap_target
    0x20c4, //  0: wait   1 irq, 4                   
    0xf850, //  1: set    y, 16           side 1     
    0xb042, //  2: nop                    side 0     
    0x1882, //  3: jmp    y--, 2          side 1     
    0xd005, //  4: irq    nowait 5        side 0     
    0xb842, //  5: nop                    side 1     
    0xb042, //  6: nop                    side 0     
    0xb842, //  7: nop                    side 1     
    0xb042, //  8: nop                    side 0     
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program ook_gen_freq_program = {
    .instructions = ook_gen_freq_program_instructions,
    .length = 9,
    .origin = -1,
};

static inline pio_sm_config ook_gen_freq_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + ook_gen_freq_wrap_target, offset + ook_gen_freq_wrap);
    sm_config_set_sideset(&c, 2, true, false);
    return c;
}

static inline void ook_gen_freq_program_init(PIO pio, uint sm, uint offset, uint pin, float div) {
    pio_sm_set_pins_with_mask(pio, sm, 0, 1u << pin);
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);
    pio_gpio_init(pio, pin);
    pio_sm_config c = ook_gen_freq_program_get_default_config(offset);
    sm_config_set_sideset_pins(&c, pin);
    sm_config_set_clkdiv(&c, div);
    pio_sm_init(pio, sm, offset + ook_gen_freq_offset_start, &c);
    pio_sm_set_enabled(pio, sm, true);
}

#endif
